// Test Dashboard Error Handling
console.log('üß™ Testing Dashboard Error Handling...\n');

// Test 1: toLocaleString with undefined values
console.log('1Ô∏è‚É£ Testing toLocaleString with undefined values...');
try {
  const undefinedValue = undefined;
  const result = (undefinedValue || 0).toLocaleString();
  console.log('‚úÖ toLocaleString with fallback:', result);
} catch (error) {
  console.log('‚ùå toLocaleString error:', error.message);
}

// Test 2: Array map with undefined values
console.log('\n2Ô∏è‚É£ Testing Array map with undefined values...');
try {
  const undefinedArray = undefined;
  const mapped = (undefinedArray?.map(item => item.value) || [1, 2, 3]).filter(Boolean);
  console.log('‚úÖ Array map with fallback:', mapped);
} catch (error) {
  console.log('‚ùå Array map error:', error.message);
}

// Test 3: Object property access with undefined
console.log('\n3Ô∏è‚É£ Testing Object property access with undefined...');
try {
  const undefinedObject = undefined;
  const value = undefinedObject?.property || 0;
  console.log('‚úÖ Object property access with fallback:', value);
} catch (error) {
  console.log('‚ùå Object property access error:', error.message);
}

// Test 4: Math operations with undefined
console.log('\n4Ô∏è‚É£ Testing Math operations with undefined...');
try {
  const undefinedValue = undefined;
  const result = Math.floor((undefinedValue || 0) / 60);
  console.log('‚úÖ Math operation with fallback:', result);
} catch (error) {
  console.log('‚ùå Math operation error:', error.message);
}

// Test 5: Division with undefined
console.log('\n5Ô∏è‚É£ Testing Division with undefined...');
try {
  const undefinedValue = undefined;
  const result = ((undefinedValue || 0) / (undefinedValue || 1)) * 100;
  console.log('‚úÖ Division with fallback:', result);
} catch (error) {
  console.log('‚ùå Division error:', error.message);
}

console.log('\n‚úÖ All error handling tests completed!');
console.log('\nüí° If all tests pass, the Dashboard should not crash with undefined values.'); 