import React, { useState, useRef, useEffect } from "react";
import { useNavigate } from 'react-router-dom';

function Register() {
  const [fullname, setFullname] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [password, setPassword] = useState("");
  const [repeatPassword, setRepeatPassword] = useState("");
  const [gender, setGender] = useState("");
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [imagePreview, setImagePreview] = useState(null);
  const [imageFile, setImageFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState("");
  const [canClose, setCanClose] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showRepeatPassword, setShowRepeatPassword] = useState(false);
  const modalContentRef = useRef(null);
  const navigate = useNavigate();
  // Terms of Service content
  const termsContent = `
ƒêI·ªÄU KHO·∫¢N D·ªäCH V·ª§ VINSAKY

1. GI·ªöI THI·ªÜU
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Vinsaky! Khi b·∫°n ƒëƒÉng k√Ω v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i, b·∫°n ƒë·ªìng √Ω tu√¢n th·ªß c√°c ƒëi·ªÅu kho·∫£n n√†y.

2. ƒêƒÇNG K√ù T√ÄI KHO·∫¢N
- B·∫°n ph·∫£i cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† ƒë·∫ßy ƒë·ªß khi ƒëƒÉng k√Ω
- B·∫°n c√≥ tr√°ch nhi·ªám b·∫£o m·∫≠t th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa m√¨nh
- M·ªôt ƒë·ªãa ch·ªâ email ch·ªâ ƒë∆∞·ª£c ƒëƒÉng k√Ω m·ªôt t√†i kho·∫£n duy nh·∫•t
- B·∫°n ph·∫£i t·ª´ 18 tu·ªïi tr·ªü l√™n ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n

3. S·ª¨ D·ª§NG D·ªäCH V·ª§
- Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng d·ªãch v·ª• cho m·ª•c ƒë√≠ch b·∫•t h·ª£p ph√°p
- Kh√¥ng ƒë∆∞·ª£c spam, qu·∫•y r·ªëi ho·∫∑c l√†m phi·ªÅn ng∆∞·ªùi d√πng kh√°c
- Tu√¢n th·ªß c√°c quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t Vi·ªát Nam
- Kh√¥ng ƒë∆∞·ª£c chia s·∫ª t√†i kho·∫£n cho ng∆∞·ªùi kh√°c s·ª≠ d·ª•ng

4. QUY·ªÄN V√Ä NGHƒ®A V·ª§
- Ch√∫ng t√¥i c√≥ quy·ªÅn t·∫°m kh√≥a ho·∫∑c x√≥a t√†i kho·∫£n vi ph·∫°m
- Ch√∫ng t√¥i c√≥ quy·ªÅn thay ƒë·ªïi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• v·ªõi th√¥ng b√°o tr∆∞·ªõc
- Ng∆∞·ªùi d√πng c√≥ quy·ªÅn h·ªßy t√†i kho·∫£n b·∫•t c·ª© l√∫c n√†o
- B√°o c√°o k·ªãp th·ªùi n·∫øu ph√°t hi·ªán vi ph·∫°m b·∫£o m·∫≠t

5. CH√çNH S√ÅCH B·∫¢O M·∫¨T
- Th√¥ng tin c√° nh√¢n ƒë∆∞·ª£c b·∫£o v·ªá theo ch√≠nh s√°ch ri√™ng t∆∞
- Ch√∫ng t√¥i kh√¥ng chia s·∫ª th√¥ng tin v·ªõi b√™n th·ª© ba kh√¥ng c√≥ s·ª± ƒë·ªìng √Ω
- D·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a v√† l∆∞u tr·ªØ an to√†n

6. CH√çNH S√ÅCH HO√ÄN TI·ªÄN
- Ho√†n ti·ªÅn trong v√≤ng 7 ng√†y n·∫øu kh√¥ng h√†i l√≤ng
- Ph√≠ d·ªãch v·ª• c√≥ th·ªÉ ƒë∆∞·ª£c kh·∫•u tr·ª´ t√πy theo tr∆∞·ªùng h·ª£p
- Quy tr√¨nh ho√†n ti·ªÅn t·ª´ 3-5 ng√†y l√†m vi·ªác

7. LI√äN H·ªÜ H·ªñ TR·ª¢
- Email: support@vinsaky.com
- Hotline: 1900-xxxx (24/7)
- ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM

8. ƒêI·ªÄU KHO·∫¢N CU·ªêI
B·∫±ng vi·ªác ƒëƒÉng k√Ω t√†i kho·∫£n, b·∫°n x√°c nh·∫≠n ƒë√£ ƒë·ªçc, hi·ªÉu v√† ƒë·ªìng √Ω v·ªõi t·∫•t c·∫£ c√°c ƒëi·ªÅu kho·∫£n tr√™n.
  `;

  // Privacy Policy content
  const policyContent = `
CH√çNH S√ÅCH B·∫¢O M·∫¨T VINSAKY

1. THU TH·∫¨P TH√îNG TIN
Ch√∫ng t√¥i thu th·∫≠p c√°c th√¥ng tin sau khi b·∫°n ƒëƒÉng k√Ω:
- Th√¥ng tin c√° nh√¢n: H·ªç t√™n, email, s·ªë ƒëi·ªán tho·∫°i
- Th√¥ng tin t√†i kho·∫£n: M·∫≠t kh·∫©u, ·∫£nh ƒë·∫°i di·ªán
- Th√¥ng tin s·ª≠ d·ª•ng: L·ªãch s·ª≠ ho·∫°t ƒë·ªông, th·ªùi gian truy c·∫≠p

2. M·ª§C ƒê√çCH S·ª¨ D·ª§NG
- T·∫°o v√† qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng
- Cung c·∫•p d·ªãch v·ª• v√† h·ªó tr·ª£ kh√°ch h√†ng
- G·ª≠i th√¥ng b√°o quan tr·ªçng v·ªÅ d·ªãch v·ª•
- C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng d·ªãch v·ª•

3. B·∫¢O V·ªÜ TH√îNG TIN
- S·ª≠ d·ª•ng m√£ h√≥a SSL ƒë·ªÉ b·∫£o v·ªá d·ªØ li·ªáu truy·ªÅn t·∫£i
- L∆∞u tr·ªØ m·∫≠t kh·∫©u d∆∞·ªõi d·∫°ng ƒë√£ m√£ h√≥a
- Ki·ªÉm so√°t truy c·∫≠p nghi√™m ng·∫∑t ƒë·ªëi v·ªõi d·ªØ li·ªáu ng∆∞·ªùi d√πng
- Sao l∆∞u d·ªØ li·ªáu ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√°nh m·∫•t m√°t

4. CHIA S·∫∫ TH√îNG TIN
Ch√∫ng t√¥i KH√îNG chia s·∫ª th√¥ng tin c√° nh√¢n c·ªßa b·∫°n v·ªõi b√™n th·ª© ba, tr·ª´ khi:
- C√≥ s·ª± ƒë·ªìng √Ω r√µ r√†ng t·ª´ b·∫°n
- Theo y√™u c·∫ßu c·ªßa c∆° quan ph√°p lu·∫≠t
- ƒê·ªÉ b·∫£o v·ªá quy·ªÅn l·ª£i c·ªßa ch√∫ng t√¥i v√† ng∆∞·ªùi d√πng kh√°c

5. QUY·ªÄN C·ª¶A NG∆Ø·ªúI D√ôNG
- Y√™u c·∫ßu xem th√¥ng tin c√° nh√¢n ƒë∆∞·ª£c l∆∞u tr·ªØ
- Y√™u c·∫ßu s·ª≠a ƒë·ªïi ho·∫∑c x√≥a th√¥ng tin c√° nh√¢n
- T·ª´ ch·ªëi nh·∫≠n email marketing
- H·ªßy t√†i kho·∫£n v√† x√≥a d·ªØ li·ªáu

6. COOKIE V√Ä C√îNG NGH·ªÜ THEO D√ïI
- S·ª≠ d·ª•ng cookie ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám ng∆∞·ªùi d√πng
- Theo d√µi ho·∫°t ƒë·ªông ƒë·ªÉ ph√¢n t√≠ch v√† c·∫£i thi·ªán d·ªãch v·ª•
- B·∫°n c√≥ th·ªÉ t·∫Øt cookie trong tr√¨nh duy·ªát

7. THAY ƒê·ªîI CH√çNH S√ÅCH
- Ch√∫ng t√¥i c√≥ th·ªÉ c·∫≠p nh·∫≠t ch√≠nh s√°ch n√†y
- Th√¥ng b√°o tr∆∞·ªõc √≠t nh·∫•t 30 ng√†y khi c√≥ thay ƒë·ªïi quan tr·ªçng
- Phi√™n b·∫£n m·ªõi nh·∫•t lu√¥n ƒë∆∞·ª£c ƒëƒÉng t·∫°i website

8. LI√äN H·ªÜ
N·∫øu c√≥ th·∫Øc m·∫Øc v·ªÅ ch√≠nh s√°ch b·∫£o m·∫≠t, li√™n h·ªá:
Email: privacy@vinsaky.com
  `;



  const handleChangeFile = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Validate file size (5MB max)
      if (file.size > 5 * 1024 * 1024) {
        alert("K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB");
        return;
      }
      
      // Validate file type
      if (!file.type.startsWith('image/')) {
        alert("Vui l√≤ng ch·ªçn file ·∫£nh");
        return;
      }

      setImageFile(file);
      const reader = new FileReader();
      reader.onloadend = () => setImagePreview(reader.result);
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validation
    const phoneRegex = /^[0-9]{10}$/;
    if (!phoneRegex.test(phone)) {
      alert("S·ªë ƒëi·ªán tho·∫°i ph·∫£i ƒë√∫ng 10 ch·ªØ s·ªë!");
      return;
    }

    if (!termsAccepted) {
      alert("B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng!");
      return;
    }

    if (password !== repeatPassword) {
      alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
      return;
    }

    if (password.length < 6) {
      alert("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
      return;
    }

    setLoading(true);
    
    try {
      // Prepare form data for file upload
      const formData = new FormData();
      formData.append('fullname', fullname);
      formData.append('email', email);
      formData.append('phone', phone);
      formData.append('address', address);
      formData.append('password', password);
      formData.append('gender', gender);
      
      // Add image file if selected
      if (imageFile) {
        formData.append('ava_img_url', imageFile);
      }

      // Get API base URL from environment variable
      const API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:4000';
      
      console.log('üîÑ ƒêang ƒëƒÉng k√Ω v·ªõi API:', `${API_BASE_URL}/auth/register`);
      
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        body: formData, // Use FormData for file upload
        // Don't set Content-Type header, let browser set it with boundary for FormData
      });

      console.log('üì° API Response status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:', data);
        
        if (data.success) {
          alert('üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.');
          navigate('/login');
        } else {
          alert(data.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.');
        }
      } else {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i:', errorData);
        alert(errorData.message || `ƒêƒÉng k√Ω th·∫•t b·∫°i (${response.status}). Vui l√≤ng th·ª≠ l·∫°i.`);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω:', error);
      alert('L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const openModal = (type) => {
    setModalType(type);
    setShowModal(true);
    setCanClose(false);
  };

  const closeModal = () => {
    setShowModal(false);
    setCanClose(false);
  };

  const handleScroll = () => {
    if (modalContentRef.current) {
      const { scrollTop, scrollHeight, clientHeight } = modalContentRef.current;
      const isAtBottom = scrollTop + clientHeight >= scrollHeight - 10;
      setCanClose(isAtBottom);
    }
  };

  useEffect(() => {
    if (showModal && modalContentRef.current) {
      modalContentRef.current.scrollTop = 0;
      setCanClose(false);
    }
  }, [showModal]);

  return (
    <>
      <style>{`
        * {
          box-sizing: border-box;
        }

        .register-container {
          min-height: 100vh;
          background-color: #f9fafb;
          padding: 2rem 1rem;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }

        .register-wrapper {
          max-width: 64rem;
          margin: 0 auto;
        }

        .register-card {
          background: white;
          border-radius: 1rem;
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
          border: 1px solid #e5e7eb;
          overflow: hidden;
        }

        .register-header {
          background: linear-gradient(to right, #eff6ff, #faf5ff);
          padding: 2rem;
          text-align: center;
          border-bottom: 1px solid #e5e7eb;
        }

        .register-icon {
          width: 4rem;
          height: 4rem;
          background-color: #dbeafe;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          margin: 0 auto 1rem;
        }

        .register-icon svg {
          width: 2rem;
          height: 2rem;
          color: #2563eb;
        }

        .register-title {
          font-size: 1.875rem;
          font-weight: 700;
          color: #1f2937;
          margin: 0 0 0.5rem;
        }

        .register-subtitle {
          color: #6b7280;
          margin: 0;
        }

        .register-form {
          padding: 2rem;
        }

        .form-section {
          margin-bottom: 1.5rem;
        }

        .section-title {
          font-size: 1.125rem;
          font-weight: 600;
          color: #1f2937;
          margin-bottom: 1rem;
        }

        .form-grid {
          display: grid;
          grid-template-columns: 1fr;
          gap: 1rem;
        }

        @media (min-width: 768px) {
          .form-grid {
            grid-template-columns: 1fr 1fr;
          }
        }

        .form-grid-full {
          grid-column: 1 / -1;
        }

        .form-group {
          display: flex;
          flex-direction: column;
        }

        .form-label {
          display: block;
          font-size: 0.875rem;
          font-weight: 500;
          color: #374151;
          margin-bottom: 0.5rem;
        }

        .form-input {
          width: 100%;
          padding: 0.75rem 1rem;
          border: 1px solid #d1d5db;
          border-radius: 0.5rem;
          font-size: 1rem;
          transition: all 0.2s;
        }

        .form-input:focus {
          outline: none;
          border-color: #3b82f6;
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-select {
          width: 100%;
          padding: 0.75rem 1rem;
          border: 1px solid #d1d5db;
          border-radius: 0.5rem;
          font-size: 1rem;
          background-color: white;
          transition: all 0.2s;
        }

        .form-select:focus {
          outline: none;
          border-color: #3b82f6;
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .password-input-wrapper {
          position: relative;
        }

        .password-toggle {
          position: absolute;
          right: 0.75rem;
          top: 50%;
          transform: translateY(-50%);
          background: none;
          border: none;
          color: #6b7280;
          cursor: pointer;
          padding: 0;
        }

        .password-toggle svg {
          width: 1.25rem;
          height: 1.25rem;
        }

        .avatar-section {
          display: flex;
          align-items: flex-start;
          gap: 1rem;
        }

        .avatar-preview {
          flex-shrink: 0;
          width: 6rem;
          height: 6rem;
          border-radius: 50%;
          overflow: hidden;
          border: 4px solid #e5e7eb;
        }

        .avatar-preview img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .avatar-placeholder {
          width: 6rem;
          height: 6rem;
          background-color: #e5e7eb;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .avatar-placeholder svg {
          width: 2rem;
          height: 2rem;
          color: #9ca3af;
        }

        .avatar-upload {
          flex: 1;
        }

        .avatar-help {
          font-size: 0.875rem;
          color: #6b7280;
          margin-top: 0.5rem;
        }

        .terms-section {
          border-top: 1px solid #e5e7eb;
          padding-top: 1.5rem;
        }

        .terms-checkbox {
          display: flex;
          align-items: flex-start;
          gap: 0.75rem;
        }

        .terms-checkbox input {
          margin-top: 0.25rem;
          width: 1rem;
          height: 1rem;
          accent-color: #3b82f6;
        }

        .terms-text {
          font-size: 0.875rem;
          color: #374151;
        }

        .terms-link {
          color: #3b82f6;
          text-decoration: underline;
          background: none;
          border: none;
          cursor: pointer;
          font-size: inherit;
          padding: 0;
        }

        .terms-link:hover {
          color: #1d4ed8;
        }

        .submit-button {
          width: 100%;
          background-color: #3b82f6;
          color: white;
          padding: 1rem 1.5rem;
          border-radius: 0.5rem;
          font-weight: 500;
          border: none;
          cursor: pointer;
          font-size: 1rem;
          transition: background-color 0.2s;
          margin-top: 1.5rem;
        }

        .submit-button:hover {
          background-color: #2563eb;
        }

        .submit-button:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }

        .loading-spinner {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 0.5rem;
        }

        .spinner {
          width: 1.25rem;
          height: 1.25rem;
          border: 2px solid white;
          border-top: 2px solid transparent;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .login-link {
          text-align: center;
          margin-top: 1.5rem;
        }

        .login-link span {
          color: #6b7280;
        }

        .login-link button {
          color: #3b82f6;
          font-weight: 500;
          background: none;
          border: none;
          cursor: pointer;
          font-size: inherit;
          text-decoration: none;
        }

        .login-link button:hover {
          color: #1d4ed8;
        }

        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 1rem;
          z-index: 1000;
        }

        .modal-content {
          background: white;
          border-radius: 0.75rem;
          max-width: 42rem;
          width: 100%;
          max-height: 80vh;
          display: flex;
          flex-direction: column;
        }

        .modal-header {
          padding: 1.5rem;
          border-bottom: 1px solid #e5e7eb;
        }

        .modal-title {
          font-size: 1.25rem;
          font-weight: 600;
          color: #1f2937;
          margin: 0;
        }

        .modal-body {
          flex: 1;
          overflow-y: auto;
          padding: 1.5rem;
        }

        .modal-text {
          white-space: pre-line;
          color: #374151;
          line-height: 1.6;
        }

        .scroll-notice {
          text-align: center;
          margin-top: 1.5rem;
          padding: 1rem;
          background-color: #eff6ff;
          border-radius: 0.5rem;
        }

        .scroll-notice-content {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 0.5rem;
          color: #3b82f6;
        }

        .scroll-notice svg {
          width: 1rem;
          height: 1rem;
          animation: bounce 1s infinite;
        }

        @keyframes bounce {
          0%, 20%, 53%, 80%, 100% {
            transform: translateY(0);
          }
          40%, 43% {
            transform: translateY(-10px);
          }
          70% {
            transform: translateY(-5px);
          }
          90% {
            transform: translateY(-2px);
          }
        }

        .scroll-notice-text {
          font-size: 0.875rem;
        }

        .modal-footer {
          padding: 1.5rem;
          border-top: 1px solid #e5e7eb;
        }

        .modal-button {
          width: 100%;
          padding: 0.75rem 1rem;
          border-radius: 0.5rem;
          font-weight: 500;
          border: none;
          cursor: pointer;
          transition: background-color 0.2s;
        }

        .modal-button-enabled {
          background-color: #3b82f6;
          color: white;
        }

        .modal-button-enabled:hover {
          background-color: #2563eb;
        }

        .modal-button-disabled {
          background-color: #d1d5db;
          color: #6b7280;
          cursor: not-allowed;
        }
      `}</style>

      <div className="register-container">
        <div className="register-wrapper">
          <div className="register-card">
            {/* Header */}
            <div className="register-header">
              <div className="register-icon">
                <svg fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                </svg>
              </div>
              <h1 className="register-title">T·∫°o t√†i kho·∫£n m·ªõi</h1>
              <p className="register-subtitle">Gia nh·∫≠p c·ªông ƒë·ªìng Vinsaky ngay h√¥m nay!</p>
            </div>

            {/* Form */}
            <div className="register-form">
              <div>
                {/* Personal Information */}
                <div className="form-section">
                  <h3 className="section-title">Th√¥ng tin c√° nh√¢n</h3>
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        H·ªç v√† t√™n *
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        placeholder="Nh·∫≠p h·ªç v√† t√™n"
                        value={fullname}
                        onChange={(e) => setFullname(e.target.value)}
                        required
                      />
                    </div>
                    
                    <div className="form-group">
                      <label className="form-label">
                        Email *
                      </label>
                      <input
                        type="email"
                        className="form-input"
                        placeholder="example@email.com"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        S·ªë ƒëi·ªán tho·∫°i *
                      </label>
                      <input
                        type="tel"
                        className="form-input"
                        placeholder="0123456789"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        Gi·ªõi t√≠nh *
                      </label>
                      <select
                        className="form-select"
                        value={gender}
                        onChange={(e) => setGender(e.target.value)}
                        required
                      >
                        <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                        <option value="Male">Nam</option>
                        <option value="Female">N·ªØ</option>
                        <option value="Other">Kh√°c</option>
                      </select>
                    </div>

                    <div className="form-group form-grid-full">
                      <label className="form-label">
                        ƒê·ªãa ch·ªâ
                      </label>
                      <input
                        type="text"
                        className="form-input"
                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n"
                        value={address}
                        onChange={(e) => setAddress(e.target.value)}
                      />
                    </div>
                  </div>
                </div>

                {/* Security */}
                <div className="form-section">
                  <h3 className="section-title">B·∫£o m·∫≠t</h3>
                  <div className="form-grid">
                    <div className="form-group">
                      <label className="form-label">
                        M·∫≠t kh·∫©u *
                      </label>
                      <div className="password-input-wrapper">
                        <input
                          type={showPassword ? "text" : "password"}
                          className="form-input"
                          placeholder="√çt nh·∫•t 6 k√Ω t·ª±"
                          value={password}
                          onChange={(e) => setPassword(e.target.value)}
                          required
                        />
                        <button
                          type="button"
                          className="password-toggle"
                          onClick={() => setShowPassword(!showPassword)}
                        >
                          {showPassword ? (
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                            </svg>
                          ) : (
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                          )}
                        </button>
                      </div>
                    </div>

                    <div className="form-group">
                      <label className="form-label">
                        Nh·∫≠p l·∫°i m·∫≠t kh·∫©u *
                      </label>
                      <div className="password-input-wrapper">
                        <input
                          type={showRepeatPassword ? "text" : "password"}
                          className="form-input"
                          placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                          value={repeatPassword}
                          onChange={(e) => setRepeatPassword(e.target.value)}
                          required
                        />
                        <button
                          type="button"
                          className="password-toggle"
                          onClick={() => setShowRepeatPassword(!showRepeatPassword)}
                        >
                          {showRepeatPassword ? (
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                            </svg>
                          ) : (
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Avatar */}
                <div className="form-section">
                  <h3 className="section-title">·∫¢nh ƒë·∫°i di·ªán</h3>
                  <div className="avatar-section">
                    <div>
                      {imagePreview ? (
                        <div className="avatar-preview">
                          <img
                            src={imagePreview}
                            alt="Preview"
                          />
                        </div>
                      ) : (
                        <div className="avatar-placeholder">
                          <svg fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                          </svg>
                        </div>
                      )}
                    </div>
                    <div className="avatar-upload">
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleChangeFile}
                        className="form-input"
                      />
                      <p className="avatar-help">
                        Ch·ªçn ·∫£nh JPG, PNG. K√≠ch th∆∞·ªõc t·ªëi ƒëa 5MB.
                      </p>
                    </div>
                  </div>
                </div>

                {/* Terms */}
                <div className="form-section terms-section">
                  <div className="terms-checkbox">
                    <input
                      type="checkbox"
                      id="terms"
                      checked={termsAccepted}
                      onChange={() => setTermsAccepted(!termsAccepted)}
                    />
                    <label htmlFor="terms" className="terms-text">
                      T√¥i ƒë·ªìng √Ω v·ªõi{" "}
                      <button
                        type="button"
                        className="terms-link"
                        onClick={() => openModal("terms")}
                      >
                        ƒêi·ªÅu kho·∫£n d·ªãch v·ª•
                      </button>
                      {" "}v√†{" "}
                      <button
                        type="button"
                        className="terms-link"
                        onClick={() => openModal("policy")}
                      >
                        Ch√≠nh s√°ch b·∫£o m·∫≠t
                      </button>
                    </label>
                  </div>
                </div>

                {/* Submit Button */}
                <button
                  onClick={handleSubmit}
                  disabled={loading}
                  className="submit-button"
                >
                  {loading ? (
                    <div className="loading-spinner">
                      <div className="spinner"></div>
                      <span>ƒêang x·ª≠ l√Ω...</span>
                    </div>
                  ) : (
                    "T·∫°o t√†i kho·∫£n"
                  )}
                </button>

                {/* Login Link */}
                <div className="login-link">
                  <span>ƒê√£ c√≥ t√†i kho·∫£n? </span>
                  <button
                    type="button"
                    onClick={() => navigate("/login")}
                  >
                    ƒêƒÉng nh·∫≠p ngay
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Modal */}
        {showModal && (
          <div className="modal-overlay">
            <div className="modal-content">
              <div className="modal-header">
                <h3 className="modal-title">
                  {modalType === "terms" ? "ƒêi·ªÅu kho·∫£n d·ªãch v·ª•" : "Ch√≠nh s√°ch b·∫£o m·∫≠t"}
                </h3>
              </div>
              
              <div
                ref={modalContentRef}
                onScroll={handleScroll}
                className="modal-body"
              >
                <div className="modal-text">
                  {modalType === "terms" ? termsContent : policyContent}
                </div>
                
                {!canClose && (
                  <div className="scroll-notice">
                    <div className="scroll-notice-content">
                      <svg fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M15.707 4.293a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-5-5a1 1 0 011.414-1.414L10 8.586l4.293-4.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                      <span className="scroll-notice-text">Vui l√≤ng l∆∞·ªõt xu·ªëng cu·ªëi ƒë·ªÉ ti·∫øp t·ª•c</span>
                    </div>
                  </div>
                )}
              </div>
              
              <div className="modal-footer">
                <button
                  onClick={closeModal}
                  disabled={!canClose}
                  className={`modal-button ${
                    canClose ? "modal-button-enabled" : "modal-button-disabled"
                  }`}
                >
                  T√¥i ƒë√£ hi·ªÉu
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}

export default Register;