const Product = require("../Model/product.model");
const Post = require("../Model/post.model");
const User = require("../Model/user.model");

class ChatService {
  constructor() {
    this.context = {};
    this.userPreferences = {};
    this.conversationHistory = [];
  }

  // Ph√¢n t√≠ch ng·ªØ c·∫£nh c√¢u h·ªèi
  analyzeContext(userQuestion) {
    const question = userQuestion.toLowerCase();
    
    // T·ª´ kh√≥a so s√°nh s·∫£n ph·∫©m
    const compareKeywords = [
      'so s√°nh', 'compare', 'ƒë·ªëi chi·∫øu', 'kh√°c bi·ªát', 'gi·ªëng nhau',
      't·ªët h∆°n', 'x·∫•u h∆°n', 'r·∫ª h∆°n', 'ƒë·∫Øt h∆°n', 'ch·∫•t l∆∞·ª£ng',
      't√≠nh nƒÉng', '∆∞u ƒëi·ªÉm', 'nh∆∞·ª£c ƒëi·ªÉm', 'l·ª±a ch·ªçn'
    ];

    // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi v·ªÅ so s√°nh kh√¥ng
    const isCompareQuestion = compareKeywords.some(keyword => 
      question.includes(keyword)
    );

    // T·ª´ kh√≥a t√¨m ki·∫øm s·∫£n ph·∫©m
    const productKeywords = [
      's·∫£n ph·∫©m', 'product', 'm√°y', 't·ªß', 'ƒë·ªì', 'h√†ng', 'item',
      'mua', 'b√°n', 'gi√°', 'price', 'th∆∞∆°ng hi·ªáu', 'brand'
    ];

    // T·ª´ kh√≥a t√¨m ki·∫øm b√†i vi·∫øt
    const postKeywords = [
      'b√†i vi·∫øt', 'post', 'article', 'tin t·ª©c', 'news', 'blog',
      'h∆∞·ªõng d·∫´n', 'guide', 'tutorial', 'review', 'ƒë√°nh gi√°'
    ];

    // T·ª´ kh√≥a th·ªëng k√™
    const statsKeywords = [
      'th·ªëng k√™', 'statistics', 's·ªë li·ªáu', 'data', 't·ªïng quan',
      'overview', 'b√°o c√°o', 'report', 't√¨nh h√¨nh', 'situation'
    ];

    // T·ª´ kh√≥a ƒë√°nh gi√° s·∫£n ph·∫©m
    const reviewKeywords = [
      'ngon', 't·ªët', 'x·∫•u', 'ch·∫•t l∆∞·ª£ng', 'quality', 'ƒë√°nh gi√°',
      'review', 'feedback', '√Ω ki·∫øn', 'opinion', 'c√≥ ngon kh√¥ng',
      'c√≥ t·ªët kh√¥ng', 'c√≥ x·∫•u kh√¥ng'
    ];

    return {
      isCompareQuestion,
      isProductQuestion: productKeywords.some(keyword => question.includes(keyword)),
      isPostQuestion: postKeywords.some(keyword => question.includes(keyword)),
      isStatsQuestion: statsKeywords.some(keyword => question.includes(keyword)),
      isReviewQuestion: reviewKeywords.some(keyword => question.includes(keyword)),
      question
    };
  }

  // T√¨m ki·∫øm s·∫£n ph·∫©m linh ho·∫°t
  async searchProducts(query) {
    try {
      // Ch·ªâ t√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m v√† th∆∞∆°ng hi·ªáu
      const products = await Product.find({
        $or: [
          { name: { $regex: query, $options: 'i' } },
          { brand: { $regex: query, $options: 'i' } }
        ]
      }).limit(10);
      return products;
    } catch (error) {
      console.error('L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m:', error);
      return [];
    }
  }

  // T√¨m ki·∫øm b√†i vi·∫øt
  async searchPosts(query) {
    try {
      // Ch·ªâ t√¨m ki·∫øm theo nguy√™n chu·ªói nh·∫≠p v√†o, kh√¥ng t√°ch t·ª´
      const posts = await Post.find({
        $or: [
          { title: { $regex: query, $options: 'i' } },
          { content: { $regex: query, $options: 'i' } },
          { category: { $regex: query, $options: 'i' } }
        ]
      }).limit(5);
      return posts;
    } catch (error) {
      console.error('L·ªói t√¨m ki·∫øm b√†i vi·∫øt:', error);
      return [];
    }
  }

  // L·∫•y th·ªëng k√™ t·ªïng quan
  async getStatistics() {
    try {
      const totalProducts = await Product.countDocuments();
      const availableProducts = await Product.countDocuments({ quantity: { $gt: 0 } });
      const totalPosts = await Post.countDocuments();
      
      // L·∫•y danh m·ª•c s·∫£n ph·∫©m ph·ªï bi·∫øn
      const categories = await Product.aggregate([
        { $group: { _id: '$category', count: { $sum: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 5 }
      ]);

      // L·∫•y th∆∞∆°ng hi·ªáu ph·ªï bi·∫øn
      const brands = await Product.aggregate([
        { $group: { _id: '$brand', count: { $sum: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 5 }
      ]);

      return {
        totalProducts,
        availableProducts,
        totalPosts,
        categories,
        brands
      };
    } catch (error) {
      console.error('L·ªói l·∫•y th·ªëng k√™:', error);
      return null;
    }
  }

  // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ so s√°nh s·∫£n ph·∫©m
  async handleCompareQuestion(question) {
    const compareKeywords = ['so s√°nh', 'compare', 'ƒë·ªëi chi·∫øu', 'kh√°c bi·ªát'];
    const hasCompareKeyword = compareKeywords.some(keyword => 
      question.toLowerCase().includes(keyword)
    );

    if (hasCompareKeyword) {
      return {
        answer: `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n so s√°nh s·∫£n ph·∫©m! Vinsaky Shop c√≥ t√≠nh nƒÉng so s√°nh s·∫£n ph·∫©m r·∫•t ti·ªán l·ª£i:

üîç **C√°ch s·ª≠ d·ª•ng t√≠nh nƒÉng so s√°nh:**
1. Nh·∫•p v√†o menu "T·∫°o m·ªõi" (d·∫•u +) tr√™n header
2. Ch·ªçn "So s√°nh s·∫£n ph·∫©m"
3. T√¨m ki·∫øm v√† th√™m t·ªëi ƒëa 4 s·∫£n ph·∫©m ƒë·ªÉ so s√°nh
4. Xem b·∫£ng so s√°nh chi ti·∫øt v·ªÅ gi√°, th∆∞∆°ng hi·ªáu, dung l∆∞·ª£ng, ƒë√°nh gi√°...

üìä **T√≠nh nƒÉng so s√°nh bao g·ªìm:**
‚Ä¢ H√¨nh ·∫£nh s·∫£n ph·∫©m
‚Ä¢ T√™n v√† th∆∞∆°ng hi·ªáu
‚Ä¢ Gi√° c·∫£
‚Ä¢ ƒê√°nh gi√° v√† x·∫øp h·∫°ng
‚Ä¢ T√¨nh tr·∫°ng kho h√†ng
‚Ä¢ Dung l∆∞·ª£ng (n·∫øu c√≥)
‚Ä¢ M√¥ t·∫£ chi ti·∫øt

üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ so s√°nh c√°c s·∫£n ph·∫©m c√πng lo·∫°i nh∆∞ t·ªß l·∫°nh, m√°y gi·∫∑t, ho·∫∑c c√°c th∆∞∆°ng hi·ªáu kh√°c nhau ƒë·ªÉ ƒë∆∞a ra l·ª±a ch·ªçn t·ªët nh·∫•t.

B·∫°n mu·ªën so s√°nh s·∫£n ph·∫©m n√†o c·ª• th·ªÉ kh√¥ng? T√¥i c√≥ th·ªÉ g·ª£i √Ω m·ªôt s·ªë s·∫£n ph·∫©m ph·ªï bi·∫øn ƒë·ªÉ so s√°nh.`,
        type: 'compare_guide'
      };
    }

    return null;
  }

  // X·ª≠ l√Ω c√¢u h·ªèi ƒë√°nh gi√° s·∫£n ph·∫©m
  async handleReviewQuestion(question) {
    const reviewKeywords = ['ngon', 't·ªët', 'x·∫•u', 'ch·∫•t l∆∞·ª£ng', 'ƒë√°nh gi√°'];
    const hasReviewKeyword = reviewKeywords.some(keyword => 
      question.toLowerCase().includes(keyword)
    );

    if (hasReviewKeyword) {
      // T√¨m s·∫£n ph·∫©m trong c√¢u h·ªèi
      const products = await this.searchProducts(question);
      
      if (products.length > 0) {
        const product = products[0];
        const rating = product.rating || 0;
        const status = product.quantity > 0 ? 'C√≤n h√†ng' : 'H·∫øt h√†ng';
        const warranty = product.warranty || 'Ch∆∞a c√≥ th√¥ng tin';
        
        let evaluation = '';
        if (rating >= 4) {
          evaluation = 'S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° r·∫•t t·ªët';
        } else if (rating >= 3) {
          evaluation = 'S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° kh√° t·ªët';
        } else if (rating >= 2) {
          evaluation = 'S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° trung b√¨nh';
        } else {
          evaluation = 'S·∫£n ph·∫©m c·∫ßn c·∫£i thi·ªán';
        }

        return {
          answer: `üì¶ **${product.name}**

‚≠ê **ƒê√°nh gi√°:** ${rating}/5 sao - ${evaluation}
üí∞ **Gi√°:** ${product.price ? `${parseFloat(product.price).toLocaleString('vi-VN')} VND` : 'Ch∆∞a c√≥ gi√°'}
üè™ **T√¨nh tr·∫°ng:** ${status}
üîß **B·∫£o h√†nh:** ${warranty}
üìù **M√¥ t·∫£:** ${product.description || 'Ch∆∞a c√≥ m√¥ t·∫£'}

üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ xem chi ti·∫øt s·∫£n ph·∫©m ho·∫∑c so s√°nh v·ªõi c√°c s·∫£n ph·∫©m kh√°c ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh t·ªët nh·∫•t.`,
          type: 'product_review',
          product: product
        };
      }
    }

    return null;
  }

  // X·ª≠ l√Ω c√¢u h·ªèi ch√≠nh
  async processQuestion(userQuestion) {
    try {
      const context = this.analyzeContext(userQuestion);
      
      // X·ª≠ l√Ω c√¢u h·ªèi so s√°nh s·∫£n ph·∫©m
      const compareResponse = await this.handleCompareQuestion(userQuestion);
      if (compareResponse) {
        return compareResponse;
      }

      // X·ª≠ l√Ω c√¢u h·ªèi ƒë√°nh gi√° s·∫£n ph·∫©m
      const reviewResponse = await this.handleReviewQuestion(userQuestion);
      if (reviewResponse) {
        return reviewResponse;
      }

      // X·ª≠ l√Ω c√¢u h·ªèi t√¨m ki·∫øm s·∫£n ph·∫©m
      if (context.isProductQuestion) {
        const products = await this.searchProducts(userQuestion);
        
        if (products.length > 0) {
          const productList = products.map(product => 
            `‚Ä¢ ${product.name} - ${product.brand} - ${product.price ? `${parseFloat(product.price).toLocaleString('vi-VN')} VND` : 'Ch∆∞a c√≥ gi√°'}`
          ).join('\n');

          return {
            answer: `üîç **K·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m:**\n\n${productList}\n\nüí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ:\n‚Ä¢ Xem chi ti·∫øt s·∫£n ph·∫©m\n‚Ä¢ So s√°nh c√°c s·∫£n ph·∫©m v·ªõi nhau\n‚Ä¢ T√¨m ki·∫øm s·∫£n ph·∫©m kh√°c`,
            type: 'product_search',
            products: products
          };
        } else {
          // T√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª±
          const allProducts = await Product.find().limit(5);
          const suggestions = allProducts.map(product => 
            `‚Ä¢ ${product.name} - ${product.brand}`
          ).join('\n');

          return {
            answer: `‚ùå **Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi "${userQuestion}"**

üí° **G·ª£i √Ω s·∫£n ph·∫©m kh√°c:**
${suggestions}

üîç **B·∫°n c√≥ th·ªÉ:**
‚Ä¢ Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c
‚Ä¢ Xem t·∫•t c·∫£ s·∫£n ph·∫©m
‚Ä¢ S·ª≠ d·ª•ng t√≠nh nƒÉng so s√°nh s·∫£n ph·∫©m`,
            type: 'no_product_found'
          };
        }
      }

      // X·ª≠ l√Ω c√¢u h·ªèi t√¨m ki·∫øm b√†i vi·∫øt
      if (context.isPostQuestion) {
        const posts = await this.searchPosts(userQuestion);
        
        if (posts.length > 0) {
          const postList = posts.map(post => 
            `‚Ä¢ ${post.title} - ${post.category}`
          ).join('\n');

          return {
            answer: `üì∞ **K·∫øt qu·∫£ t√¨m ki·∫øm b√†i vi·∫øt:**\n\n${postList}`,
            type: 'post_search',
            posts: posts
          };
        }
      }

      // X·ª≠ l√Ω c√¢u h·ªèi th·ªëng k√™
      if (context.isStatsQuestion) {
        const stats = await this.getStatistics();
        
        if (stats) {
          const categoryList = stats.categories.map(cat => 
            `‚Ä¢ ${cat._id}: ${cat.count} s·∫£n ph·∫©m`
          ).join('\n');

          const brandList = stats.brands.map(brand => 
            `‚Ä¢ ${brand._id}: ${brand.count} s·∫£n ph·∫©m`
          ).join('\n');

          return {
            answer: `üìä **Th·ªëng k√™ Vinsaky Shop:**

üõçÔ∏è **S·∫£n ph·∫©m:**
‚Ä¢ T·ªïng s·ªë: ${stats.totalProducts} s·∫£n ph·∫©m
‚Ä¢ C√≤n h√†ng: ${stats.availableProducts} s·∫£n ph·∫©m

üì∞ **B√†i vi·∫øt:** ${stats.totalPosts} b√†i vi·∫øt

üè∑Ô∏è **Danh m·ª•c ph·ªï bi·∫øn:**
${categoryList}

üè≠ **Th∆∞∆°ng hi·ªáu ph·ªï bi·∫øn:**
${brandList}`,
            type: 'statistics'
          };
        }
      }

      // C√¢u h·ªèi chung v·ªÅ so s√°nh s·∫£n ph·∫©m
      if (userQuestion.includes('so s√°nh') || userQuestion.includes('compare')) {
        return {
          answer: `üîç **T√≠nh nƒÉng so s√°nh s·∫£n ph·∫©m c·ªßa Vinsaky Shop:**

‚úÖ **C√≥ th·ªÉ so s√°nh t·ªëi ƒëa 4 s·∫£n ph·∫©m c√πng l√∫c**
‚úÖ **So s√°nh chi ti·∫øt:** gi√°, th∆∞∆°ng hi·ªáu, dung l∆∞·ª£ng, ƒë√°nh gi√°, t√¨nh tr·∫°ng kho
‚úÖ **Giao di·ªán tr·ª±c quan** v·ªõi b·∫£ng so s√°nh d·ªÖ ƒë·ªçc
‚úÖ **T√¨m ki·∫øm nhanh** s·∫£n ph·∫©m ƒë·ªÉ th√™m v√†o so s√°nh

üöÄ **C√°ch s·ª≠ d·ª•ng:**
1. Nh·∫•p v√†o menu "T·∫°o m·ªõi" (d·∫•u +) tr√™n header
2. Ch·ªçn "So s√°nh s·∫£n ph·∫©m"
3. T√¨m ki·∫øm v√† th√™m s·∫£n ph·∫©m mu·ªën so s√°nh
4. Xem b·∫£ng so s√°nh chi ti·∫øt

üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ so s√°nh c√°c s·∫£n ph·∫©m c√πng lo·∫°i ho·∫∑c kh√°c th∆∞∆°ng hi·ªáu ƒë·ªÉ ƒë∆∞a ra l·ª±a ch·ªçn t·ªët nh·∫•t!`,
          type: 'compare_info'
        };
      }

      // Tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
      return {
        answer: `Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Vinsaky Shop. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

üîç **T√¨m ki·∫øm s·∫£n ph·∫©m** - H·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ
üìä **Xem th·ªëng k√™** - Th√¥ng tin t·ªïng quan v·ªÅ shop
üì∞ **T√¨m b√†i vi·∫øt** - B√†i vi·∫øt v√† h∆∞·ªõng d·∫´n
‚öñÔ∏è **So s√°nh s·∫£n ph·∫©m** - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng t√≠nh nƒÉng so s√°nh
‚≠ê **ƒê√°nh gi√° s·∫£n ph·∫©m** - Th√¥ng tin ch·∫•t l∆∞·ª£ng v√† ƒë√°nh gi√°

B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?`,
        type: 'general_help'
      };

    } catch (error) {
      console.error('L·ªói x·ª≠ l√Ω c√¢u h·ªèi:', error);
      return {
        answer: 'Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.',
        type: 'error'
      };
    }
  }

  // L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
  async getProductDetails(productId) {
    try {
      const product = await Product.findOne({ id: productId });
      return product;
    } catch (error) {
      console.error("L·ªói l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
      return null;
    }
  }

  // L·∫•y th√¥ng tin chi ti·∫øt b√†i vi·∫øt
  async getPostDetails(postId) {
    try {
      const post = await Post.findOne({ id: postId });
      return post;
    } catch (error) {
      console.error("L·ªói l·∫•y chi ti·∫øt b√†i vi·∫øt:", error);
      return null;
    }
  }

  // T√¨m ki·∫øm s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
  async searchProductsByBrand(brand) {
    try {
      const products = await Product.find({ 
        brand: new RegExp(brand, 'i') 
      }).sort({ createdAt: -1 }).limit(10);
      
      return products;
    } catch (error) {
      console.error("L·ªói t√¨m ki·∫øm theo th∆∞∆°ng hi·ªáu:", error);
      return [];
    }
  }

  // T√¨m ki·∫øm b√†i vi·∫øt theo danh m·ª•c
  async searchPostsByCategory(category) {
    try {
      const posts = await Post.find({ 
        category: new RegExp(category, 'i'),
        condition: "Active"
      }).sort({ createdAt: -1 }).limit(10);
      
      return posts;
    } catch (error) {
      console.error("L·ªói t√¨m ki·∫øm theo danh m·ª•c:", error);
      return [];
    }
  }
}

module.exports = ChatService; 