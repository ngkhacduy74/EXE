const Product = require("../Model/product.model");
const Post = require("../Model/post.model");
const User = require("../Model/user.model");

// Simple responses for basic greetings
const simpleResponses = {
  "xin ch√†o": "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Vinsaky Shop. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
  "hello": "Hello! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Vinsaky Shop. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
  "ch√†o": "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Vinsaky Shop. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
  "c·∫£m ∆°n": "Kh√¥ng c√≥ g√¨! N·∫øu b·∫°n c·∫ßn th√™m th√¥ng tin g√¨, ƒë·ª´ng ng·∫°i h·ªèi nh√©!",
  "t·∫°m bi·ªát": "T·∫°m bi·ªát! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh. H·∫πn g·∫∑p l·∫°i!",
  "bye": "T·∫°m bi·ªát! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh. H·∫πn g·∫∑p l·∫°i!"
};

// H√†m t√¨m ki·∫øm s·∫£n ph·∫©m linh ho·∫°t - c·∫£i thi·ªán
async function searchProducts(query) {
  try {
    if (!query || query.trim() === '') {
      return await Product.find().sort({ createdAt: -1 }).limit(5);
    }

    // T√°ch t·ª´ kh√≥a t√¨m ki·∫øm
    const keywords = query.toLowerCase().split(/\s+/).filter(word => word.length > 1);
    
    if (keywords.length > 0) {
      const searchConditions = [];
      
      // T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
      searchConditions.push({ name: { $regex: query, $options: 'i' } });
      
      // T√¨m ki·∫øm theo th∆∞∆°ng hi·ªáu
      searchConditions.push({ brand: { $regex: query, $options: 'i' } });
      
      // T√¨m ki·∫øm theo m√¥ t·∫£
      searchConditions.push({ description: { $regex: query, $options: 'i' } });
      
      // T√¨m ki·∫øm theo t·ª´ng t·ª´ kh√≥a ri√™ng l·∫ª
      keywords.forEach(keyword => {
        searchConditions.push({ name: { $regex: keyword, $options: 'i' } });
        searchConditions.push({ brand: { $regex: keyword, $options: 'i' } });
        searchConditions.push({ description: { $regex: keyword, $options: 'i' } });
      });
      
      const products = await Product.find({
        $or: searchConditions
      }).sort({ createdAt: -1 }).limit(5);

      return products;
    }

    return [];
  } catch (error) {
    console.error("L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m:", error);
    return [];
  }
}

// H√†m t√¨m ki·∫øm b√†i vi·∫øt linh ho·∫°t
async function searchPosts(query) {
  try {
    if (!query || query.trim() === '') {
      return await Post.find({ condition: "Active" }).sort({ createdAt: -1 }).limit(3);
    }

    const searchRegex = new RegExp(query, 'i');
    
    const posts = await Post.find({
      $or: [
        { title: searchRegex },
        { description: searchRegex },
        { category: searchRegex }
      ],
      condition: "Active"
    }).sort({ createdAt: -1 }).limit(3);

    return posts;
  } catch (error) {
    console.error("L·ªói t√¨m ki·∫øm b√†i vi·∫øt:", error);
    return [];
  }
}

// H√†m l·∫•y th·ªëng k√™ c∆° b·∫£n
async function getStatistics() {
  try {
    const [totalProducts, newProducts, usedProducts, totalPosts, activePosts] = await Promise.all([
      Product.countDocuments(),
      Product.countDocuments({ status: "New" }),
      Product.countDocuments({ status: "SecondHand" }),
      Post.countDocuments(),
      Post.countDocuments({ condition: "Active" })
    ]);
    
    return {
      totalProducts,
      newProducts,
      usedProducts,
      totalPosts,
      activePosts
    };
  } catch (error) {
    console.error("L·ªói l·∫•y th·ªëng k√™:", error);
    return null;
  }
}

// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã khi kh√¥ng t√¨m th·∫•y
async function getAllProducts(limit = 5) {
  try {
    const products = await Product.find()
      .sort({ createdAt: -1 })
      .limit(limit);
    return products;
  } catch (error) {
    console.error("L·ªói l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", error);
    return [];
  }
}

// L·∫•y s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
async function getProductsByBrand(brand, limit = 5) {
  try {
    const products = await Product.find({ 
      brand: new RegExp(brand, 'i') 
    })
      .sort({ createdAt: -1 })
      .limit(limit);
    return products;
  } catch (error) {
    console.error("L·ªói l·∫•y s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu:", error);
    return [];
  }
}

// L·∫•y s·∫£n ph·∫©m theo lo·∫°i (t·ªß l·∫°nh, m√°y l√†m ƒë√°, etc.)
async function getProductsByType(type, limit = 5) {
  try {
    const products = await Product.find({
      $or: [
        { name: { $regex: type, $options: 'i' } },
        { description: { $regex: type, $options: 'i' } }
      ]
    })
      .sort({ createdAt: -1 })
      .limit(limit);
    return products;
  } catch (error) {
    console.error("L·ªói l·∫•y s·∫£n ph·∫©m theo lo·∫°i:", error);
    return [];
  }
}

// H√†m x·ª≠ l√Ω c√¢u h·ªèi ch√≠nh - linh ho·∫°t h∆°n
async function handleUserQuestion(userText) {
  try {
    const text = userText.toLowerCase();
    
    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ªëng k√™
    if (text.includes('th·ªëng k√™') || text.includes('s·ªë li·ªáu') || text.includes('bao nhi√™u')) {
      const stats = await getStatistics();
      if (stats) {
        return `Th·ªëng k√™ hi·ªán t·∫°i c·ªßa Vinsaky Shop:\n\n` +
               `üì¶ S·∫£n ph·∫©m: ${stats.totalProducts} (M·ªõi: ${stats.newProducts}, ƒê√£ qua s·ª≠ d·ª•ng: ${stats.usedProducts})\n` +
               `üìù B√†i vi·∫øt: ${stats.totalPosts} (ƒêang ho·∫°t ƒë·ªông: ${stats.activePosts})\n\n` +
               `B·∫°n mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ s·∫£n ph·∫©m hay b√†i vi·∫øt n√†o kh√¥ng?`;
      }
    }

    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒë√°nh gi√° s·∫£n ph·∫©m
    if (text.includes('c√≥ ngon kh√¥ng') || text.includes('t·ªët kh√¥ng') || text.includes('ch·∫•t l∆∞·ª£ng') || 
        text.includes('ƒë√°nh gi√°') || text.includes('review') || text.includes('so s√°nh')) {
      
      // T√¨m ki·∫øm s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
      const productKeywords = text.split(' ').filter(word => 
        word.length > 2 && !['c√≥', 'ngon', 'kh√¥ng', 't·ªët', 'ch·∫•t', 'l∆∞·ª£ng', 'ƒë√°nh', 'gi√°', 'review', 'so', 's√°nh'].includes(word)
      );
      
      if (productKeywords.length > 0) {
        const searchQuery = productKeywords.join(' ');
        const products = await searchProducts(searchQuery);
        
        if (products.length > 0) {
          let response = `V·ªÅ s·∫£n ph·∫©m ${products[0].name}:\n\n`;
          
          // Th√¥ng tin c∆° b·∫£n
          response += `üìã Th√¥ng tin s·∫£n ph·∫©m:\n`;
          response += `‚Ä¢ Th∆∞∆°ng hi·ªáu: ${products[0].brand}\n`;
          response += `‚Ä¢ Gi√°: ${products[0].price}\n`;
          response += `‚Ä¢ Tr·∫°ng th√°i: ${products[0].status}\n`;
          response += `‚Ä¢ B·∫£o h√†nh: ${products[0].warranty_period} th√°ng\n`;
          
          if (products[0].description) {
            response += `‚Ä¢ M√¥ t·∫£: ${products[0].description.substring(0, 200)}...\n\n`;
          }
          
          // ƒê√°nh gi√° d·ª±a tr√™n th√¥ng tin c√≥ s·∫µn
          response += `‚≠ê ƒê√°nh gi√°:\n`;
          if (products[0].status === 'New') {
            response += `‚Ä¢ S·∫£n ph·∫©m m·ªõi, ch·∫•t l∆∞·ª£ng ƒë·∫£m b·∫£o\n`;
          } else {
            response += `‚Ä¢ S·∫£n ph·∫©m ƒë√£ qua s·ª≠ d·ª•ng, gi√° t·ªët\n`;
          }
          
          if (products[0].warranty_period >= 12) {
            response += `‚Ä¢ B·∫£o h√†nh d√†i h·∫°n (${products[0].warranty_period} th√°ng)\n`;
          }
          
          response += `‚Ä¢ Li√™n h·ªá: ${products[0].business_phone} ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt\n\n`;
          response += `B·∫°n c√≥ mu·ªën xem th√™m s·∫£n ph·∫©m t∆∞∆°ng t·ª± kh√¥ng?`;
          
          return response;
        }
      }
    }

    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m m·ªõi
    if (text.includes('s·∫£n ph·∫©m m·ªõi') || text.includes('h√†ng m·ªõi') || text.includes('m·ªõi nh·∫•t')) {
      const newProducts = await Product.find({ status: "New" }).sort({ createdAt: -1 }).limit(5);
      if (newProducts.length > 0) {
        const productList = newProducts.map(product => 
          `‚Ä¢ ${product.name} (${product.brand}) - ${product.price}`
        ).join('\n');
        
        return `C√°c s·∫£n ph·∫©m m·ªõi nh·∫•t:\n\n${productList}\n\nB·∫°n c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?`;
      }
    }

    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m ƒë√£ qua s·ª≠ d·ª•ng
    if (text.includes('ƒë√£ qua s·ª≠ d·ª•ng') || text.includes('c≈©') || text.includes('second hand')) {
      const usedProducts = await Product.find({ status: "SecondHand" }).sort({ createdAt: -1 }).limit(5);
      if (usedProducts.length > 0) {
        const productList = usedProducts.map(product => 
          `‚Ä¢ ${product.name} (${product.brand}) - ${product.price}`
        ).join('\n');
        
        return `C√°c s·∫£n ph·∫©m ƒë√£ qua s·ª≠ d·ª•ng:\n\n${productList}\n\nB·∫°n c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?`;
      }
    }

    // T√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a
    const products = await searchProducts(userText);
    if (products.length > 0) {
      const productList = products.map(product => 
        `‚Ä¢ ${product.name} (${product.brand}) - ${product.price}`
      ).join('\n');
      
      return `T√¥i t√¨m th·∫•y c√°c s·∫£n ph·∫©m ph√π h·ª£p:\n\n${productList}\n\nB·∫°n c√≥ mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?`;
    }

    // T√¨m ki·∫øm b√†i vi·∫øt theo t·ª´ kh√≥a
    const posts = await searchPosts(userText);
    if (posts.length > 0) {
      const postList = posts.map(post => 
        `‚Ä¢ ${post.title} (${post.category})`
      ).join('\n');
      
      return `T√¥i t√¨m th·∫•y c√°c b√†i vi·∫øt li√™n quan:\n\n${postList}\n\nB·∫°n c√≥ mu·ªën ƒë·ªçc b√†i vi·∫øt n√†o kh√¥ng?`;
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c·ª• th·ªÉ, hi·ªÉn th·ªã th√¥ng tin h·ªØu √≠ch
    const stats = await getStatistics();
    const allProducts = await getAllProducts(3);
    
    let response = `T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${userText}" trong c∆° s·ªü d·ªØ li·ªáu.\n\n`;
    
    if (stats) {
      response += `Hi·ªán t·∫°i ch√∫ng t√¥i c√≥:\n` +
                 `üì¶ ${stats.totalProducts} s·∫£n ph·∫©m (${stats.newProducts} m·ªõi, ${stats.usedProducts} ƒë√£ qua s·ª≠ d·ª•ng)\n` +
                 `üìù ${stats.totalPosts} b√†i vi·∫øt (${stats.activePosts} ƒëang ho·∫°t ƒë·ªông)\n\n`;
    }

    if (allProducts.length > 0) {
      response += `M·ªôt s·ªë s·∫£n ph·∫©m c√≥ s·∫µn:\n`;
      const productList = allProducts.map(product => 
        `‚Ä¢ ${product.name} (${product.brand}) - ${product.price}`
      ).join('\n');
      response += `${productList}\n\n`;
    }

    // Ki·ªÉm tra xem c√≥ ph·∫£i t√¨m ki·∫øm theo th∆∞∆°ng hi·ªáu kh√¥ng
    const brandKeywords = ['fushimavina', 'ababa', 'samsung', 'lg', 'panasonic'];
    const foundBrand = brandKeywords.find(brand => text.includes(brand));
    
    if (foundBrand) {
      const brandProducts = await getProductsByBrand(foundBrand, 3);
      if (brandProducts.length > 0) {
        response += `S·∫£n ph·∫©m ${foundBrand.toUpperCase()} c√≥ s·∫µn:\n`;
        const brandProductList = brandProducts.map(product => 
          `‚Ä¢ ${product.name} - ${product.price}`
        ).join('\n');
        response += `${brandProductList}\n\n`;
      }
    }

    // Ki·ªÉm tra xem c√≥ ph·∫£i t√¨m ki·∫øm theo lo·∫°i s·∫£n ph·∫©m kh√¥ng
    const typeKeywords = ['t·ªß', 'l·∫°nh', 'ƒë√¥ng', 'm√°y', 'l√†m', 'ƒë√°', 'vi√™n', 'c·∫•p'];
    const foundType = typeKeywords.find(type => text.includes(type));
    
    if (foundType) {
      const typeProducts = await getProductsByType(foundType, 3);
      if (typeProducts.length > 0) {
        response += `S·∫£n ph·∫©m ${foundType} c√≥ s·∫µn:\n`;
        const typeProductList = typeProducts.map(product => 
          `‚Ä¢ ${product.name} (${product.brand}) - ${product.price}`
        ).join('\n');
        response += `${typeProductList}\n\n`;
      }
    }

    response += `B·∫°n c√≥ th·ªÉ:\n` +
               `‚Ä¢ T√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c\n` +
               `‚Ä¢ Xem t·∫•t c·∫£ s·∫£n ph·∫©m\n` +
               `‚Ä¢ H·ªèi v·ªÅ s·∫£n ph·∫©m m·ªõi nh·∫•t\n` +
               `‚Ä¢ H·ªèi v·ªÅ s·∫£n ph·∫©m ƒë√£ qua s·ª≠ d·ª•ng`;

    return response;
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω c√¢u h·ªèi:", error);
    return null;
  }
}

async function getChatResponse(userMessages) {
  try {
    // L·∫•y tin nh·∫Øn cu·ªëi c√πng t·ª´ user
    const lastUserMessage = userMessages[userMessages.length - 1];
    if (!lastUserMessage || lastUserMessage.role !== "user") {
      return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?";
    }

    const userText = lastUserMessage.content.toLowerCase();
    
    // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi ƒë∆°n gi·∫£n tr∆∞·ªõc
    for (const [keyword, response] of Object.entries(simpleResponses)) {
      if (userText.includes(keyword)) {
        return response;
      }
    }

    // X·ª≠ l√Ω c√¢u h·ªèi ch√≠nh
    const response = await handleUserQuestion(userText);
    if (response) {
      return response;
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y g√¨, tr·∫£ v·ªÅ th√¥ng tin chung
    const stats = await getStatistics();
    if (stats) {
      return `T√¥i hi·ªÉu b·∫°n ƒëang t√¨m ki·∫øm th√¥ng tin. Hi·ªán t·∫°i ch√∫ng t√¥i c√≥:\n\n` +
             `üì¶ ${stats.totalProducts} s·∫£n ph·∫©m (${stats.newProducts} m·ªõi, ${stats.usedProducts} ƒë√£ qua s·ª≠ d·ª•ng)\n` +
             `üìù ${stats.totalPosts} b√†i vi·∫øt (${stats.activePosts} ƒëang ho·∫°t ƒë·ªông)\n\n` +
             `B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n` +
             `‚Ä¢ S·∫£n ph·∫©m c·ª• th·ªÉ\n` +
             `‚Ä¢ S·∫£n ph·∫©m m·ªõi nh·∫•t\n` +
             `‚Ä¢ S·∫£n ph·∫©m ƒë√£ qua s·ª≠ d·ª•ng\n` +
             `‚Ä¢ B√†i vi·∫øt theo ch·ªß ƒë·ªÅ\n` +
             `‚Ä¢ Th·ªëng k√™ chi ti·∫øt`;
    }

    return "T√¥i l√† tr·ª£ l√Ω AI c·ªßa Vinsaky Shop. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m, ƒë·ªçc b√†i vi·∫øt, ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√°c. B·∫°n c·∫ßn g√¨?";

  } catch (err) {
    console.error("L·ªói chat response:", err.message);
    return "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.";
  }
}

module.exports = getChatResponse;
